/*
 * Aestheticodes recognises a different marker scheme that allows the
 * creation of aesthetically pleasing, even beautiful, codes.
 * Copyright (C) 2015  Aestheticodes
 *
 *     This program is free software: you can redistribute it and/or modify
 *     it under the terms of the GNU Affero General Public License as published
 *     by the Free Software Foundation, either version 3 of the License, or
 *     (at your option) any later version.
 *
 *     This program is distributed in the hope that it will be useful,
 *     but WITHOUT ANY WARRANTY; without even the implied warranty of
 *     MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 *     GNU Affero General Public License for more details.
 *
 *     You should have received a copy of the GNU Affero General Public License
 *     along with this program.  If not, see <http://www.gnu.org/licenses/>.
 */
buildscript {
	repositories {
		mavenCentral()
	}
	dependencies {
		classpath 'com.android.tools.build:gradle:1.1.0'
	}
}

apply plugin: 'idea'
apply plugin: 'eclipse'
apply plugin: 'com.android.application'

repositories {
	mavenCentral()
	maven {
		url 'https://raw.githubusercontent.com/vRallev/mvn-repo/master/'
	}
}

dependencies {
	compile project(":aestheticodes-core")
	compile 'com.android.support:palette-v7:22.0.0'
	compile 'com.google.android.gms:play-services-base:7.0.0'
	compile 'com.google.android.gms:play-services-location:7.0.0'
	compile 'com.squareup.picasso:picasso:2.4.0'
	compile 'org.opencv:opencv-android:2.4.8'
}

android {
	compileSdkVersion 22
	buildToolsVersion "22.0.1"

	defaultConfig {
		minSdkVersion 10
		targetSdkVersion 22
		versionCode 400034
		versionName '2.3.2'

		resConfigs "nodpi", "hdpi", "xhdpi", "xxhdpi", "xxxhdpi"
	}

	signingConfigs {
		release {
			storeFile file(project.property('keystore'))
			storePassword project.property('keystore.password')
			keyAlias project.property('key.alias')
			keyPassword project.property('key.password')
		}
	}

	buildTypes {
		release {
			signingConfig signingConfigs.release
		}

		debug {
			signingConfig signingConfigs.release
		}
	}

	lintOptions {
		abortOnError false
	}

	splits {
		abi {
			enable true
			reset()
			include 'x86', 'armeabi', 'armeabi-v7a', 'mips'
		}
	}

	// map for the version code
	project.ext.versionCodes = [armeabi:1,'armeabi-v7a':2, mips:3, x86:4]

	android.applicationVariants.all { variant ->
		// assign different version code for each output
		variant.outputs.each { output ->
			output.versionCodeOverride =
					project.ext.versionCodes.get(output.getFilter(com.android.build.OutputFile.ABI), 0) + (defaultConfig.versionCode * 10)
		}
	}
}

task wrapper(type: Wrapper) {
	gradleVersion = '2.2.1'
}